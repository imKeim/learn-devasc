{
    
    "title": "Экзамен: Понимание и использование API",
    "description": "Нажмите ``Начать прохождение`` для отображения вопросов и выберите самый подходящий ответ",
    "difficulty": 1,
    "duration": "PT0H30M",
    "materialType": "test",
    "passingScore": 100,
    "questions": [
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Он работает как облачный сервис.",
                    "comment": "Соответствие ограничениям архитектуры REST обычно называют «RESTful». API можно считать «RESTful», если он имеет следующие функции:\n**Клиент/сервер** — клиент обрабатывает внешний интерфейс, а сервер — внутренний.\n**Без сохранения состояния** — никакие клиентские данные не сохраняются на сервере между запросами. Состояние сеанса сохраняется на клиенте.\n**Кэшируемый** — клиенты могут кэшировать ответы локально для повышения производительности.",
                    "correct": false
                },
                {
                    "answer": "Он работает без сохранения состояния.",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Он использует HTTPS для передачи данных.",
                    "comment": "Соответствие ограничениям архитектуры REST обычно называют «RESTful». API можно считать «RESTful», если он имеет следующие функции:\n**Клиент/сервер** — клиент обрабатывает внешний интерфейс, а сервер — внутренний.\n**Без сохранения состояния** — никакие клиентские данные не сохраняются на сервере между запросами. Состояние сеанса сохраняется на клиенте.\n**Кэшируемый** — клиенты могут кэшировать ответы локально для повышения производительности.",
                    "correct": false
                },
                {
                    "answer": "Он должен работать вместе с DNS-сервером.",
                    "comment": "Соответствие ограничениям архитектуры REST обычно называют «RESTful». API можно считать «RESTful», если он имеет следующие функции:\n**Клиент/сервер** — клиент обрабатывает внешний интерфейс, а сервер — внутренний.\n**Без сохранения состояния** — никакие клиентские данные не сохраняются на сервере между запросами. Состояние сеанса сохраняется на клиенте.\n**Кэшируемый** — клиенты могут кэшировать ответы локально для повышения производительности.",
                    "correct": false
                }
            ],
            "question": "Каково архитектурное ограничение, которому должна соответствовать настоящая веб-служба RESTful API?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "когда сервер не является частью процесса",
                    "comment": "Синхронные API-интерфейсы отвечают на запрос напрямую и немедленно, например, когда данные предоставляются из памяти или базы данных. Напротив, асинхронные API могут отправить уведомление о том, что был сделан запрос данных, отправить данные позже, инициировать обратный вызов для предоставления данных или обработать запрос, а затем выполнить соответствующее действие. Действие может быть немедленным, но не обязательно.",
                    "correct": false
                },
                {
                    "answer": "когда данные извлекаются из базы данных",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "когда от клиента не требуется никаких действий",
                    "comment": "Синхронные API-интерфейсы отвечают на запрос напрямую и немедленно, например, когда данные предоставляются из памяти или базы данных. Напротив, асинхронные API могут отправить уведомление о том, что был сделан запрос данных, отправить данные позже, инициировать обратный вызов для предоставления данных или обработать запрос, а затем выполнить соответствующее действие. Действие может быть немедленным, но не обязательно.",
                    "correct": false
                },
                {
                    "answer": "когда исходный запрос API или данные из запроса задерживаются",
                    "comment": "Синхронные API-интерфейсы отвечают на запрос напрямую и немедленно, например, когда данные предоставляются из памяти или базы данных. Напротив, асинхронные API могут отправить уведомление о том, что был сделан запрос данных, отправить данные позже, инициировать обратный вызов для предоставления данных или обработать запрос, а затем выполнить соответствующее действие. Действие может быть немедленным, но не обязательно.",
                    "correct": false
                }
            ],
            "question": "В какой ситуации будет использоваться синхронный API?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "NFS",
                    "comment": "Простой протокол доступа к объектам (SOAP) — это протокол обмена сообщениями, используемый, когда приложения должны взаимодействовать. Это протокол на основе XML, разработанный Microsoft.",
                    "correct": false
                },
                {
                    "answer": "REST",
                    "comment": "Простой протокол доступа к объектам (SOAP) — это протокол обмена сообщениями, используемый, когда приложения должны взаимодействовать. Это протокол на основе XML, разработанный Microsoft.",
                    "correct": false
                },
                {
                    "answer": "SOAP",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "XML-RPC",
                    "comment": "Простой протокол доступа к объектам (SOAP) — это протокол обмена сообщениями, используемый, когда приложения должны взаимодействовать. Это протокол на основе XML, разработанный Microsoft.",
                    "correct": false
                }
            ],
            "question": "Какой архитектурный стиль API использует протокол обмена сообщениями на основе XML для связи между приложениями?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "нейтралитет",
                    "comment": "SOAP был разработан таким образом, чтобы все типы приложений могли взаимодействовать друг с другом, какими бы непохожими они ни были. Приложения могут быть созданы с использованием разных языков программирования, могут работать в разных операционных системах и могут быть максимально непохожими.",
                    "correct": false
                },
                {
                    "answer": "расширяемость",
                    "comment": "SOAP был разработан таким образом, чтобы все типы приложений могли взаимодействовать друг с другом, какими бы непохожими они ни были. Приложения могут быть созданы с использованием разных языков программирования, могут работать в разных операционных системах и могут быть максимально непохожими.",
                    "correct": false
                },
                {
                    "answer": "независимость",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "единообразие интерфейса",
                    "comment": "SOAP был разработан таким образом, чтобы все типы приложений могли взаимодействовать друг с другом, какими бы непохожими они ни были. Приложения могут быть созданы с использованием разных языков программирования, могут работать в разных операционных системах и могут быть максимально непохожими.",
                    "correct": false
                }
            ],
            "question": "Какая характеристика архитектуры SOAP определяет связь между всеми похожими и разными типами приложений?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Body",
                    "comment": "Сообщение SOAP представляет собой XML-документ, который может содержать четыре элемента, а именно: конверт, заголовок, тело и ошибку. Envelope должен быть корневым элементом XML-документа. В Envelope предоставленное пространство имен определяет, что XML-документ является сообщением SOAP.",
                    "correct": false
                },
                {
                    "answer": "Header",
                    "comment": "Сообщение SOAP представляет собой XML-документ, который может содержать четыре элемента, а именно: конверт, заголовок, тело и ошибку. Envelope должен быть корневым элементом XML-документа. В Envelope предоставленное пространство имен определяет, что XML-документ является сообщением SOAP.",
                    "correct": false
                },
                {
                    "answer": "Envelope",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Meta tag",
                    "comment": "Сообщение SOAP представляет собой XML-документ, который может содержать четыре элемента, а именно: конверт, заголовок, тело и ошибку. Envelope должен быть корневым элементом XML-документа. В Envelope предоставленное пространство имен определяет, что XML-документ является сообщением SOAP.",
                    "correct": false
                }
            ],
            "question": "Какой корневой элемент сообщения SOAP определяет XML-документ как сообщение SOAP?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Это южный API.",
                    "comment": "RESTful API используют методы HTTP для сбора и обработки данных. Это северные API. Поскольку существует определенная структура работы HTTP, он предлагает согласованный способ взаимодействия с RESTful API от разных поставщиков.",
                    "correct": false
                },
                {
                    "answer": "Он использует методы HTTP для сбора и обработки данных.",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Это облегчает изменения конфигурации от сетевого контроллера до конечных устройств.",
                    "comment": "RESTful API используют методы HTTP для сбора и обработки данных. Это северные API. Поскольку существует определенная структура работы HTTP, он предлагает согласованный способ взаимодействия с RESTful API от разных поставщиков.",
                    "correct": false
                },
                {
                    "answer": "Он поддерживает безопасную передачу данных между удаленным пользователем и корпоративной сетью.",
                    "comment": "RESTful API используют методы HTTP для сбора и обработки данных. Это северные API. Поскольку существует определенная структура работы HTTP, он предлагает согласованный способ взаимодействия с RESTful API от разных поставщиков.",
                    "correct": false
                }
            ],
            "question": "Что характерно для RESTful API?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "201",
                    "comment": "Наиболее распространенные коды состояния HTTP включают следующее:\n200 — **OK** (используя GET или POST для успешного обмена данными с API)\n201 — **Создано** (создание ресурсов с помощью вызова REST API успешно)\n400 — **Неверный запрос** (запрос от клиента не выполнен из-за проблемы на стороне клиента.)\n401 — **Неавторизовано** (Клиент не прошел проверку подлинности для доступа к сайту или вызову API.)\n403 — **Запрещено** (запрос на доступ не предоставляется на основании предоставленных учетных данных.)\n404 — **Не найдено** (страница, запрошенная по URL-адресу HTTP, не существует или скрыта).",
                    "correct": false
                },
                {
                    "answer": "400",
                    "comment": "Наиболее распространенные коды состояния HTTP включают следующее:\n200 — **OK** (используя GET или POST для успешного обмена данными с API)\n201 — **Создано** (создание ресурсов с помощью вызова REST API успешно)\n400 — **Неверный запрос** (запрос от клиента не выполнен из-за проблемы на стороне клиента.)\n401 — **Неавторизовано** (Клиент не прошел проверку подлинности для доступа к сайту или вызову API.)\n403 — **Запрещено** (запрос на доступ не предоставляется на основании предоставленных учетных данных.)\n404 — **Не найдено** (страница, запрошенная по URL-адресу HTTP, не существует или скрыта).",
                    "correct": false
                },
                {
                    "answer": "401",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "403",
                    "comment": "Наиболее распространенные коды состояния HTTP включают следующее:\n200 — **OK** (используя GET или POST для успешного обмена данными с API)\n201 — **Создано** (создание ресурсов с помощью вызова REST API успешно)\n400 — **Неверный запрос** (запрос от клиента не выполнен из-за проблемы на стороне клиента.)\n401 — **Неавторизовано** (Клиент не прошел проверку подлинности для доступа к сайту или вызову API.)\n403 — **Запрещено** (запрос на доступ не предоставляется на основании предоставленных учетных данных.)\n404 — **Не найдено** (страница, запрошенная по URL-адресу HTTP, не существует или скрыта).",
                    "correct": false
                },
                {
                    "answer": "404",
                    "comment": "Наиболее распространенные коды состояния HTTP включают следующее:\n200 — **OK** (используя GET или POST для успешного обмена данными с API)\n201 — **Создано** (создание ресурсов с помощью вызова REST API успешно)\n400 — **Неверный запрос** (запрос от клиента не выполнен из-за проблемы на стороне клиента.)\n401 — **Неавторизовано** (Клиент не прошел проверку подлинности для доступа к сайту или вызову API.)\n403 — **Запрещено** (запрос на доступ не предоставляется на основании предоставленных учетных данных.)\n404 — **Не найдено** (страница, запрошенная по URL-адресу HTTP, не существует или скрыта).",
                    "correct": false
                }
            ],
            "question": "Какой код состояния ответа HTTP указывает на то, что пользователь не прошел проверку подлинности для доступа к сайту?"
        },
        {
            "answerType": "multiChoice",
            "answers": [
                {
                    "answer": "*",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "br",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "xz",
                    "comment": "Несколько допустимых значений для заголовка запроса Accept-Encoding: gzip, Compress, Deflate, br, Identity и *.",
                    "correct": false
                },
                {
                    "answer": "tar",
                    "comment": "Несколько допустимых значений для заголовка запроса Accept-Encoding: gzip, Compress, Deflate, br, Identity и *.",
                    "correct": false
                },
                {
                    "answer": "zip",
                    "comment": "Несколько допустимых значений для заголовка запроса Accept-Encoding: gzip, Compress, Deflate, br, Identity и *.",
                    "correct": false
                },
                {
                    "answer": "gzip",
                    "comment": "",
                    "correct": true
                }
            ],
            "question": "Клиент отправляет запрос REST API на веб-сервер. Запрос включает в себя необходимость сжатия данных. Какие три значения допустимы для заголовка запроса Accept-Encoding? (Выберите три.)"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "путь",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "запрос",
                    "comment": "Запросы REST API — это, по сути, HTTP-запросы, соответствующие принципам REST. Запросы REST API состоят из 4 основных компонентов, а именно: универсального идентификатора ресурса (URI), метода HTTP, заголовка и тела. URI — это, по сути, тот же формат, что и URL-адрес, используемый в браузере для перехода на веб-страницу. Синтаксис состоит из следующих компонентов в порядке синтаксиса:\n**Схема** — указывает, какой протокол HTTP следует использовать.\n**Полномочия**, также называемые местом назначения, состоят из двух частей: хоста и порта.\n**Путь** — также известный как путь к ресурсу, указывает расположение ресурса на веб-сайте.\n**Запрос** — указывает параметры запроса с дополнительными сведениями для области, для фильтрации или для уточнения запроса.",
                    "correct": false
                },
                {
                    "answer": "схема",
                    "comment": "Запросы REST API — это, по сути, HTTP-запросы, соответствующие принципам REST. Запросы REST API состоят из 4 основных компонентов, а именно: универсального идентификатора ресурса (URI), метода HTTP, заголовка и тела. URI — это, по сути, тот же формат, что и URL-адрес, используемый в браузере для перехода на веб-страницу. Синтаксис состоит из следующих компонентов в порядке синтаксиса:\n**Схема** — указывает, какой протокол HTTP следует использовать.\n**Полномочия**, также называемые местом назначения, состоят из двух частей: хоста и порта.\n**Путь** — также известный как путь к ресурсу, указывает расположение ресурса на веб-сайте.\n**Запрос** — указывает параметры запроса с дополнительными сведениями для области, для фильтрации или для уточнения запроса.",
                    "correct": false
                },
                {
                    "answer": "полномочия",
                    "comment": "Запросы REST API — это, по сути, HTTP-запросы, соответствующие принципам REST. Запросы REST API состоят из 4 основных компонентов, а именно: универсального идентификатора ресурса (URI), метода HTTP, заголовка и тела. URI — это, по сути, тот же формат, что и URL-адрес, используемый в браузере для перехода на веб-страницу. Синтаксис состоит из следующих компонентов в порядке синтаксиса:\n**Схема** — указывает, какой протокол HTTP следует использовать.\n**Полномочия**, также называемые местом назначения, состоят из двух частей: хоста и порта.\n**Путь** — также известный как путь к ресурсу, указывает расположение ресурса на веб-сайте.\n**Запрос** — указывает параметры запроса с дополнительными сведениями для области, для фильтрации или для уточнения запроса.",
                    "correct": false
                }
            ],
            "question": "В примере URI запроса REST API **http://example.com/update/person?id=42&email=person%40example.com** какой термин описывает компонент **example.com**?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "пароль, закодированный с использованием Base64",
                    "comment": "Аутентификация носителя использует токен носителя, который представляет собой строку, сгенерированную сервером аутентификации, например службой идентификации (IdS).",
                    "correct": false
                },
                {
                    "answer": "имя пользователя и пароль, установленные клиентом",
                    "comment": "Аутентификация носителя использует токен носителя, который представляет собой строку, сгенерированную сервером аутентификации, например службой идентификации (IdS).",
                    "correct": false
                },
                {
                    "answer": "строка, сгенерированная сервером аутентификации",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "хеш-строка MD5, сгенерированная клиентским приложением",
                    "comment": "Аутентификация носителя использует токен носителя, который представляет собой строку, сгенерированную сервером аутентификации, например службой идентификации (IdS).",
                    "correct": false
                }
            ],
            "question": "Какой тип учетных данных используется для аутентификации носителя в REST API?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Это количество запросов, содержащихся в корзине токенов.",
                    "comment": "Открытая авторизация, также известная как OAuth, сочетает аутентификацию с авторизацией. Обычно это рекомендуемая форма аутентификации/авторизации для REST API. OAuth 2.0 позволяет предварительно зарегистрированным приложениям получать авторизацию для выполнения запросов REST API от имени пользователя, при этом пользователю не нужно делиться своими учетными данными с самим приложением. OAuth позволяет пользователю предоставлять учетные данные непосредственно серверу авторизации, чтобы получить токен доступа, которым можно поделиться с приложением. Этот процесс получения токена называется потоком. Затем приложение использует этот токен в REST API в качестве аутентификации носителя. Затем веб-служба для REST API проверяет сервер авторизации, чтобы убедиться, что токен действителен и что запрашивающая сторона уполномочена выполнять запрос.",
                    "correct": false
                },
                {
                    "answer": "Это последовательность данных, которыми обмениваются запрос REST API и ответ.",
                    "comment": "Открытая авторизация, также известная как OAuth, сочетает аутентификацию с авторизацией. Обычно это рекомендуемая форма аутентификации/авторизации для REST API. OAuth 2.0 позволяет предварительно зарегистрированным приложениям получать авторизацию для выполнения запросов REST API от имени пользователя, при этом пользователю не нужно делиться своими учетными данными с самим приложением. OAuth позволяет пользователю предоставлять учетные данные непосредственно серверу авторизации, чтобы получить токен доступа, которым можно поделиться с приложением. Этот процесс получения токена называется потоком. Затем приложение использует этот токен в REST API в качестве аутентификации носителя. Затем веб-служба для REST API проверяет сервер авторизации, чтобы убедиться, что токен действителен и что запрашивающая сторона уполномочена выполнять запрос.",
                    "correct": false
                },
                {
                    "answer": "Это процесс запроса API для отправки учетных данных для аутентификации в веб-службу.",
                    "comment": "Открытая авторизация, также известная как OAuth, сочетает аутентификацию с авторизацией. Обычно это рекомендуемая форма аутентификации/авторизации для REST API. OAuth 2.0 позволяет предварительно зарегистрированным приложениям получать авторизацию для выполнения запросов REST API от имени пользователя, при этом пользователю не нужно делиться своими учетными данными с самим приложением. OAuth позволяет пользователю предоставлять учетные данные непосредственно серверу авторизации, чтобы получить токен доступа, которым можно поделиться с приложением. Этот процесс получения токена называется потоком. Затем приложение использует этот токен в REST API в качестве аутентификации носителя. Затем веб-служба для REST API проверяет сервер авторизации, чтобы убедиться, что токен действителен и что запрашивающая сторона уполномочена выполнять запрос.",
                    "correct": false
                },
                {
                    "answer": "Это процесс, при котором пользователь API получает токен доступа с сервера авторизации.",
                    "comment": "",
                    "correct": true
                }
            ],
            "question": "Что означает термин «*поток (flow)*» применительно к структуре авторизации OAuth 2.0?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Curl показывает полученную информацию в формате JSON.",
                    "comment": "Клиенты для URL-адресов (curl или cURL) — это инструмент, используемый на многих платформах для получения или отправки файлов с использованием синтаксиса URL. Возвращенную информацию можно скопировать, а затем использовать из командной строки с помощью команды curl либо для получения информации с использованием параметра GET, либо для отправки данных с использованием параметра POST.",
                    "correct": false
                },
                {
                    "answer": "Curl показывает URL-адрес, используемый в запросе API.",
                    "comment": "Клиенты для URL-адресов (curl или cURL) — это инструмент, используемый на многих платформах для получения или отправки файлов с использованием синтаксиса URL. Возвращенную информацию можно скопировать, а затем использовать из командной строки с помощью команды curl либо для получения информации с использованием параметра GET, либо для отправки данных с использованием параметра POST.",
                    "correct": false
                },
                {
                    "answer": "Curl показывает информацию, которую API возвращает с сервера.",
                    "comment": "Клиенты для URL-адресов (curl или cURL) — это инструмент, используемый на многих платформах для получения или отправки файлов с использованием синтаксиса URL. Возвращенную информацию можно скопировать, а затем использовать из командной строки с помощью команды curl либо для получения информации с использованием параметра GET, либо для отправки данных с использованием параметра POST.",
                    "correct": false
                },
                {
                    "answer": "Curl показывает, как получить доступ к содержимому, отображаемому в теле ответа, с помощью curl.",
                    "comment": "",
                    "correct": true
                }
            ],
            "question": "Сетевой инженер изучает API Rest. При выполнении определенного API сервер отвечает curl. Чем полезна эта информация?"
        },
        {
            "answerType": "multiChoice",
            "answers": [
                {
                    "answer": "чтобы обеспечить лучший сервис и время отклика для всех пользователей",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "ограничить количество запросов авторизации на вызов API",
                    "comment": "Использование ограничения скорости API — это способ для веб-службы контролировать количество запросов, которые пользователь или приложение может сделать в определенную единицу времени, и это считается лучшей практикой для общедоступных и неограниченных API. Некоторые преимущества использования ограничений скорости включают следующее:\nИзбегайте перегрузки сервера из-за слишком большого количества запросов одновременно.\nОбеспечьте лучший сервис и время отклика для всех пользователей.\nЗащита от атак типа «отказ в обслуживании» (DoS).",
                    "correct": false
                },
                {
                    "answer": "чтобы избежать перегрузки сервера из-за слишком большого количества запросов одновременно",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "чтобы убедиться, что клиент использует механизм многофакторной аутентификации",
                    "comment": "Использование ограничения скорости API — это способ для веб-службы контролировать количество запросов, которые пользователь или приложение может сделать в определенную единицу времени, и это считается лучшей практикой для общедоступных и неограниченных API. Некоторые преимущества использования ограничений скорости включают следующее:\nИзбегайте перегрузки сервера из-за слишком большого количества запросов одновременно.\nОбеспечьте лучший сервис и время отклика для всех пользователей.\nЗащита от атак типа «отказ в обслуживании» (DoS).",
                    "correct": false
                },
                {
                    "answer": "ограничить количество паролей, которые клиент может иметь при выполнении запросов API",
                    "comment": "Использование ограничения скорости API — это способ для веб-службы контролировать количество запросов, которые пользователь или приложение может сделать в определенную единицу времени, и это считается лучшей практикой для общедоступных и неограниченных API. Некоторые преимущества использования ограничений скорости включают следующее:\nИзбегайте перегрузки сервера из-за слишком большого количества запросов одновременно.\nОбеспечьте лучший сервис и время отклика для всех пользователей.\nЗащита от атак типа «отказ в обслуживании» (DoS).",
                    "correct": false
                }
            ],
            "question": "Каковы две цели использования ограничений скорости для общедоступных и неограниченных API? (Выберите два.)"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "",
                    "comment": "",
                    "correct": false
                },
                {
                    "answer": "",
                    "comment": "",
                    "correct": false
                },
                {
                    "answer": "",
                    "comment": "",
                    "correct": false
                }
            ],
            "question": ""
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Протокол неверный.",
                    "comment": "В сообщении об ошибке указано «ConnectionError». Адрес хоста назначения, вероятно, неверен, потому что он недоступен.",
                    "correct": false
                },
                {
                    "answer": "SSL-сертификат недействителен.",
                    "comment": "В сообщении об ошибке указано «ConnectionError». Адрес хоста назначения, вероятно, неверен, потому что он недоступен.",
                    "correct": false
                },
                {
                    "answer": "Неверный адрес узла назначения.",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Компонент запроса отсутствует.",
                    "comment": "В сообщении об ошибке указано «ConnectionError». Адрес хоста назначения, вероятно, неверен, потому что он недоступен.",
                    "correct": false
                }
            ],
            "question": "![](./assets/4.10.png)\nПосмотрите на рисунок. Сетевой администратор использует сценарий Python для тестирования запроса REST API. Сообщение трассировки указывает на ошибку в URI. Какова возможная проблема?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Он опускает URL-адрес отправки в ответе.",
                    "comment": "Когда схема URI — HTTPS, соединение выполняет рукопожатие SSL между клиентом и сервером, чтобы аутентифицировать друг друга. Это рукопожатие должно быть успешным, прежде чем запрос REST API можно будет отправить на сервер API. На этапе разработки API с HTTPS нуждаются в тестировании, и, поскольку действительный сертификат еще не получен, процесс установления связи SSL можно отключить с помощью строки кода.",
                    "correct": false
                },
                {
                    "answer": "Он обходит проверку проверки сертификата.",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Он проверяет функцию библиотеки запросов Python.",
                    "comment": "Когда схема URI — HTTPS, соединение выполняет рукопожатие SSL между клиентом и сервером, чтобы аутентифицировать друг друга. Это рукопожатие должно быть успешным, прежде чем запрос REST API можно будет отправить на сервер API. На этапе разработки API с HTTPS нуждаются в тестировании, и, поскольку действительный сертификат еще не получен, процесс установления связи SSL можно отключить с помощью строки кода.",
                    "correct": false
                },
                {
                    "answer": "Он пропускает этап проверки URL-адреса и проверяет путь к ресурсу.",
                    "comment": "Когда схема URI — HTTPS, соединение выполняет рукопожатие SSL между клиентом и сервером, чтобы аутентифицировать друг друга. Это рукопожатие должно быть успешным, прежде чем запрос REST API можно будет отправить на сервер API. На этапе разработки API с HTTPS нуждаются в тестировании, и, поскольку действительный сертификат еще не получен, процесс установления связи SSL можно отключить с помощью строки кода.",
                    "correct": false
                }
            ],
            "question": "![](./assets/4.10.png)\nПосмотрите на рисунок. Сетевой администратор использует скрипт Python для отправки запроса REST API. Какова цель строки кода ``resp = request.get(url, verify = False)``?"
        },
        {
            "answerType": "matching",
            "options": [
                {
                    "option": "READ",
                    "match": "1"
                },
                {
                    "option": "CREATE",
                    "match": "2"
                },
                {
                    "option": "DELETE",
                    "match": "3"
                },
                {
                    "option": "UPDATE",
                    "match": "4"
                }
            ],
            "answers": [
                {
                    "answer": "GET",
                    "match": "1"
                },
                {
                    "answer": "POST",
                    "match": "2"
                },
                {
                    "answer": "DELETE",
                    "match": "3"
                },
                {
                    "answer": "PUT/PATCH",
                    "match": "4"
                }
            ],
            "question": "Сопоставьте метод RESTful API с функцией CRUD."
        }
    ],
    "skills": {},
    "tags": {
        "$ref": "../../material-tags.json"
    },
    "assets": {
        "$ref": "./assets"
    }
}