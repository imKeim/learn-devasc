{
    "description": "Нажмите ``Начать прохождение`` для отображения вопросов и выберите самый подходящий ответ",
    "difficulty": 1,
    "duration": "PT0H30M",
    "materialType": "test",
    "passingScore": 100,
    "questions": [
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Это способ хранения и обмена данными в структурированном формате.",
                    "comment": "Тема 4.3.0. REST — это не протокол или служба, а стиль архитектуры программного обеспечения для разработки приложений веб-службы",
                    "correct": false
                },
                {
                    "answer": "Это архитектурный стиль для разработки приложений веб-служб.",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Это удобочитаемая структура данных, которая используется приложениями для хранения, преобразования и чтения данных.",
                    "comment": "Тема 4.3.0. REST — это не протокол или служба, а стиль архитектуры программного обеспечения для разработки приложений веб-службы",
                    "correct": false
                },
                {
                    "answer": "Это протокол, который позволяет администраторам управлять узлами в IP-сети.",
                    "comment": "Тема 4.3.0. REST — это не протокол или служба, а стиль архитектуры программного обеспечения для разработки приложений веб-службы",
                    "correct": false
                }
            ],
            "question": "Что такое REST?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "403",
                    "comment": "Тема 4.4.0. К наиболее распространенным кодам состояния HTTP относятся следующие:\n* 200 — **OK** (используя GET или POST для успешного обмена данными с API)\n* 201 — **Создан** (создание ресурсов с помощью вызова REST API успешно)\n* 400 — **Неверный запрос** (запрос от клиента не выполнен из-за проблемы на стороне клиента.)\n* 401 — **Неавторизовано** (Клиент не прошел проверку подлинности для доступа к сайту или вызову API.)\n* 403 — **Запрещено** (запрос на доступ не предоставляется на основании предоставленных учетных данных.)\n * 404 — **Не найдено** (страница, запрошенная по URL-адресу HTTP, не существует или скрыта).",
                    "correct": false
                },
                {
                    "answer": "201",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "200",
                    "comment": "Тема 4.4.0. К наиболее распространенным кодам состояния HTTP относятся следующие:\n* 200 — **OK** (используя GET или POST для успешного обмена данными с API)\n* 201 — **Создан** (создание ресурсов с помощью вызова REST API успешно)\n* 400 — **Неверный запрос** (запрос от клиента не выполнен из-за проблемы на стороне клиента.)\n* 401 — **Неавторизовано** (Клиент не прошел проверку подлинности для доступа к сайту или вызову API.)\n* 403 — **Запрещено** (запрос на доступ не предоставляется на основании предоставленных учетных данных.)\n * 404 — **Не найдено** (страница, запрошенная по URL-адресу HTTP, не существует или скрыта).",
                    "correct": false
                },
                {
                    "answer": "401",
                    "comment": "Тема 4.4.0. К наиболее распространенным кодам состояния HTTP относятся следующие:\n* 200 — **OK** (используя GET или POST для успешного обмена данными с API)\n* 201 — **Создан** (создание ресурсов с помощью вызова REST API успешно)\n* 400 — **Неверный запрос** (запрос от клиента не выполнен из-за проблемы на стороне клиента.)\n* 401 — **Неавторизовано** (Клиент не прошел проверку подлинности для доступа к сайту или вызову API.)\n* 403 — **Запрещено** (запрос на доступ не предоставляется на основании предоставленных учетных данных.)\n * 404 — **Не найдено** (страница, запрошенная по URL-адресу HTTP, не существует или скрыта).",
                    "correct": false
                },
                {
                    "answer": "400",
                    "comment": "Тема 4.4.0. К наиболее распространенным кодам состояния HTTP относятся следующие:\n* 200 — **OK** (используя GET или POST для успешного обмена данными с API)\n* 201 — **Создан** (создание ресурсов с помощью вызова REST API успешно)\n* 400 — **Неверный запрос** (запрос от клиента не выполнен из-за проблемы на стороне клиента.)\n* 401 — **Неавторизовано** (Клиент не прошел проверку подлинности для доступа к сайту или вызову API.)\n* 403 — **Запрещено** (запрос на доступ не предоставляется на основании предоставленных учетных данных.)\n * 404 — **Не найдено** (страница, запрошенная по URL-адресу HTTP, не существует или скрыта).",
                    "correct": false
                },
                {
                    "answer": "404",
                    "comment": "Тема 4.4.0. К наиболее распространенным кодам состояния HTTP относятся следующие:\n* 200 — **OK** (используя GET или POST для успешного обмена данными с API)\n* 201 — **Создан** (создание ресурсов с помощью вызова REST API успешно)\n* 400 — **Неверный запрос** (запрос от клиента не выполнен из-за проблемы на стороне клиента.)\n* 401 — **Неавторизовано** (Клиент не прошел проверку подлинности для доступа к сайту или вызову API.)\n* 403 — **Запрещено** (запрос на доступ не предоставляется на основании предоставленных учетных данных.)\n * 404 — **Не найдено** (страница, запрошенная по URL-адресу HTTP, не существует или скрыта).",
                    "correct": false
                }
            ],
            "question": "Какой код состояния ответа HTTP указывает на то, что запрос на обновление базы данных выполнен?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "3",
                    "comment": "Тема 4.3.0. Сообщение SOAP представляет собой XML-документ, который может содержать четыре элемента, а именно: Envelope (конверт), Header (заголовок), Body (тело) и Fault (ошибка).",
                    "correct": false
                },
                {
                    "answer": "4",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "5",
                    "comment": "Тема 4.3.0. Сообщение SOAP представляет собой XML-документ, который может содержать четыре элемента, а именно: Envelope (конверт), Header (заголовок), Body (тело) и Fault (ошибка).",
                    "correct": false
                },
                {
                    "answer": "2",
                    "comment": "Тема 4.3.0. Сообщение SOAP представляет собой XML-документ, который может содержать четыре элемента, а именно: Envelope (конверт), Header (заголовок), Body (тело) и Fault (ошибка).",
                    "correct": false
                }
            ],
            "question": "Сколько элементов содержит сообщение SOAP?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Компонент запроса отсутствует.",
                    "comment": "Тема 4.8.0. В сообщении об ошибке указано «MissingSchema». URI запроса REST API требует URI для использования надлежащего протокола HTTP, HTTP или HTTPS.",
                    "correct": false
                },
                {
                    "answer": "Протокол отсутствует.",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Адрес веб-узла назначения недействителен.",
                    "comment": "Тема 4.8.0. В сообщении об ошибке указано «MissingSchema». URI запроса REST API требует URI для использования надлежащего протокола HTTP, HTTP или HTTPS.",
                    "correct": false
                },
                {
                    "answer": "Путь в URI недействителен.",
                    "comment": "Тема 4.8.0. В сообщении об ошибке указано «MissingSchema». URI запроса REST API требует URI для использования надлежащего протокола HTTP, HTTP или HTTPS.",
                    "correct": false
                }
            ],
            "question": "![](./assets/4.9.3.png)\n\nПосмотрите на рисунок. Сетевой администратор использует сценарий Python для тестирования запроса REST API. Сообщение трассировки (traceback message) указывает на наличие ошибки в URI. В чем ошибка?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Base64",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Base32",
                    "comment": "Тема 4.5.0 — REST API используют кодировку Base64 для базовой аутентификации. Base64 — это схема преобразования двоичного кода в текст.",
                    "correct": false
                },
                {
                    "answer": "UTF-16",
                    "comment": "Тема 4.5.0 — REST API используют кодировку Base64 для базовой аутентификации. Base64 — это схема преобразования двоичного кода в текст.",
                    "correct": false
                },
                {
                    "answer": "UTF-8",
                    "comment": "Тема 4.5.0 — REST API используют кодировку Base64 для базовой аутентификации. Base64 — это схема преобразования двоичного кода в текст.",
                    "correct": false
                }
            ],
            "question": "Какой тип кодирования используется при базовой аутентификации для REST API?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Он работает как облачный сервис.",
                    "comment": "Тема 4.3.0. Соответствие ограничениям архитектуры REST обычно называется «RESTful». API можно считать «RESTful», если он имеет следующие функции:\n* **Клиент/сервер** — клиент обрабатывает внешний интерфейс, а сервер — внутренний.\n* **Без сохранения состояния** — никакие клиентские данные не сохраняются на сервере между запросами. Состояние сеанса сохраняется на клиенте.\n* **Кэшируемый** — клиенты могут кэшировать ответы локально для повышения производительности.",
                    "correct": false
                },
                {
                    "answer": "Он использует HTTPS для передачи данных.",
                    "comment": "Тема 4.3.0. Соответствие ограничениям архитектуры REST обычно называется «RESTful». API можно считать «RESTful», если он имеет следующие функции:\n* **Клиент/сервер** — клиент обрабатывает внешний интерфейс, а сервер — внутренний.\n* **Без сохранения состояния** — никакие клиентские данные не сохраняются на сервере между запросами. Состояние сеанса сохраняется на клиенте.\n* **Кэшируемый** — клиенты могут кэшировать ответы локально для повышения производительности.",
                    "correct": false
                },
                {
                    "answer": "Он должен поддерживать формат данных XML.",
                    "comment": "Тема 4.3.0. Соответствие ограничениям архитектуры REST обычно называется «RESTful». API можно считать «RESTful», если он имеет следующие функции:\n* **Клиент/сервер** — клиент обрабатывает внешний интерфейс, а сервер — внутренний.\n* **Без сохранения состояния** — никакие клиентские данные не сохраняются на сервере между запросами. Состояние сеанса сохраняется на клиенте.\n* **Кэшируемый** — клиенты могут кэшировать ответы локально для повышения производительности.",
                    "correct": false
                },
                {
                    "answer": "Он работает как модель клиент/сервер.",
                    "comment": "",
                    "correct": true
                }
            ],
            "question": "Каково архитектурное ограничение, которому должна соответствовать настоящая веб-служба RESTful API?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "для предоставления высшему руководству информации о производительности сети",
                    "comment": "Тема 4.1.0. Интерфейсы прикладного программирования или API взаимодействуют с одним или несколькими приложениями. API обычно используются для автоматизации задач, облегчения интеграции данных и расширения функциональности другого приложения. Неспециалисты по программному обеспечению теперь могут использовать API для автоматизации настройки или сбора данных с сетевых устройств.",
                    "correct": false
                },
                {
                    "answer": "для обеспечения более надежной архитектуры безопасности",
                    "comment": "Тема 4.1.0. Интерфейсы прикладного программирования или API взаимодействуют с одним или несколькими приложениями. API обычно используются для автоматизации задач, облегчения интеграции данных и расширения функциональности другого приложения. Неспециалисты по программному обеспечению теперь могут использовать API для автоматизации настройки или сбора данных с сетевых устройств.",
                    "correct": false
                },
                {
                    "answer": "для автоматизации задач настройки или сбора данных",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "для облегчения функций сетевых устройств, которые работают на разных уровнях",
                    "comment": "Тема 4.1.0. Интерфейсы прикладного программирования или API взаимодействуют с одним или несколькими приложениями. API обычно используются для автоматизации задач, облегчения интеграции данных и расширения функциональности другого приложения. Неспециалисты по программному обеспечению теперь могут использовать API для автоматизации настройки или сбора данных с сетевых устройств.",
                    "correct": false
                }
            ],
            "question": "По какой причине сетевой инженер будет использовать API?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Это обратный вызов HTTP для URL-адреса, чтобы уведомить клиентское приложение о том, что произошло событие.",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Это перенаправление HTTP для перенаправления запроса API на другую веб-службу.",
                    "comment": "Тема 4.7.0. Веб-перехватчик (webhook) — это обратный вызов HTTP или HTTP POST для указанного URL-адреса, который уведомляет клиентское приложение, когда в одном из ресурсов на платформе произошло определенное действие или событие.",
                    "correct": false
                },
                {
                    "answer": "Это сообщение HTTP PUT для обновления информации на веб-сайте.",
                    "comment": "Тема 4.7.0. Веб-перехватчик (webhook) — это обратный вызов HTTP или HTTP POST для указанного URL-адреса, который уведомляет клиентское приложение, когда в одном из ресурсов на платформе произошло определенное действие или событие.",
                    "correct": false
                },
                {
                    "answer": "Это сообщение HTTP UPDATE для уведомления пользователя об успешном выполнении запроса API.",
                    "comment": "Тема 4.7.0. Веб-перехватчик (webhook) — это обратный вызов HTTP или HTTP POST для указанного URL-адреса, который уведомляет клиентское приложение, когда в одном из ресурсов на платформе произошло определенное действие или событие.",
                    "correct": false
                }
            ],
            "question": "Что такое веб-перехватчик (webhook) для REST API?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "to import Python modules",
                    "comment": "Тема 4.9.0 — Когда создается сценарий переменная может использоваться для хранения информации. Имя переменной находится слева, а значение — справа.",
                    "correct": false
                },
                {
                    "answer": "запросить данные JSON",
                    "comment": "Тема 4.9.0 — Когда создается сценарий переменная может использоваться для хранения информации. Имя переменной находится слева, а значение — справа.",
                    "correct": false
                },
                {
                    "answer": "создавать функции для тестирования кода",
                    "comment": "Тема 4.9.0 — Когда создается сценарий переменная может использоваться для хранения информации. Имя переменной находится слева, а значение — справа.",
                    "correct": false
                },
                {
                    "answer": "для создания переменных",
                    "comment": "",
                    "correct": true
                }
            ],
            "question": "В рамках создания запроса API с помощью Python вводятся следующие команды. Какова цель этого шага?\n```\nipaddr = 10.1.50.1\ninterface = Ethernet1/1\nhostname = R1```"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "ведро токенов (token bucket)",
                    "comment": "Тема 4.6.0. Общие алгоритмы ограничения скорости включают следующее:\n* Дырявое ведро\n* Ведро токенов\n* Фиксированный счетчик окна\n* Счетчик с раздвижным окном\n                    Алгоритм дырявого ведра помещает все входящие запросы в очередь запросов в том порядке, в котором они были получены. Входящие запросы могут поступать с любой скоростью, но сервер будет обрабатывать запросы из очереди с фиксированной скоростью. Если очередь запросов заполнена, запрос отклоняется.",
                    "correct": false
                },
                {
                    "answer": "фиксированный счетчик окон (fixed window counter)",
                    "comment": "Тема 4.6.0. Общие алгоритмы ограничения скорости включают следующее:\n* Дырявое ведро\n* Ведро токенов\n* Фиксированный счетчик окна\n* Счетчик с раздвижным окном\n                    Алгоритм дырявого ведра помещает все входящие запросы в очередь запросов в том порядке, в котором они были получены. Входящие запросы могут поступать с любой скоростью, но сервер будет обрабатывать запросы из очереди с фиксированной скоростью. Если очередь запросов заполнена, запрос отклоняется.",
                    "correct": false
                },
                {
                    "answer": "дырявое ведро (leaky bucket)",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "счетчик с раздвижным окном (sliding window counter)",
                    "comment": "Тема 4.6.0. Общие алгоритмы ограничения скорости включают следующее:\n* Дырявое ведро\n* Ведро токенов\n* Фиксированный счетчик окна\n* Счетчик с раздвижным окном\n                    Алгоритм дырявого ведра помещает все входящие запросы в очередь запросов в том порядке, в котором они были получены. Входящие запросы могут поступать с любой скоростью, но сервер будет обрабатывать запросы из очереди с фиксированной скоростью. Если очередь запросов заполнена, запрос отклоняется.",
                    "correct": false
                }
            ],
            "question": "Веб-служба использует алгоритм ограничения скорости, который помещает все входящие запросы REST API в очередь в порядке их поступления. Алгоритм позволяет входящим запросам поступать с любой скоростью, но сервер обрабатывает запросы из очереди с фиксированной скоростью. Какой алгоритм ограничения скорости используется веб-службой?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Приложение должно принимать сообщения HTTP UPDATE от поставщика веб-перехватчиков.",
                    "comment": "Тема 4.7.0. Чтобы получать уведомления от провайдера веб-перехватчиков, клиентское приложение должно соответствовать определенным требованиям:\n* Приложение должно быть всегда запущено, чтобы получать HTTP-запросы POST.\n* Приложение должно зарегистрировать URI в поставщике веб-перехватчиков, чтобы поставщик знал, куда отправлять уведомление при возникновении целевых событий.\n* Приложение должно обрабатывать входящие уведомления с сервера веб-перехватчиков.",
                    "correct": false
                },
                {
                    "answer": "Приложение должно предоставлять службу системного журнала.",
                    "comment": "Тема 4.7.0. Чтобы получать уведомления от провайдера веб-перехватчиков, клиентское приложение должно соответствовать определенным требованиям:\n* Приложение должно быть всегда запущено, чтобы получать HTTP-запросы POST.\n* Приложение должно зарегистрировать URI в поставщике веб-перехватчиков, чтобы поставщик знал, куда отправлять уведомление при возникновении целевых событий.\n* Приложение должно обрабатывать входящие уведомления с сервера веб-перехватчиков.",
                    "correct": false
                },
                {
                    "answer": "Приложение должно быть всегда запущено, чтобы получать HTTP-запросы POST.",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Приложение должно зарегистрировать уникальное доменное имя в центре сертификации.",
                    "comment": "Тема 4.7.0. Чтобы получать уведомления от провайдера веб-перехватчиков, клиентское приложение должно соответствовать определенным требованиям:\n* Приложение должно быть всегда запущено, чтобы получать HTTP-запросы POST.\n* Приложение должно зарегистрировать URI в поставщике веб-перехватчиков, чтобы поставщик знал, куда отправлять уведомление при возникновении целевых событий.\n* Приложение должно обрабатывать входящие уведомления с сервера веб-перехватчиков.",
                    "correct": false
                }
            ],
            "question": "Каково требование приложения для получения уведомления от поставщика веб-перехватчиков?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "read",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "update",
                    "comment": "Тема 4.4.0. Операции RESTful соответствуют следующим методам HTTP (показаны слева, а операция RESTful справа):\n* POST > Create\n* GET > Read\n* PUT/PATCH > Update\n* DELETE > Delete",
                    "correct": false
                },
                {
                    "answer": "patch",
                    "comment": "Тема 4.4.0. Операции RESTful соответствуют следующим методам HTTP (показаны слева, а операция RESTful справа):\n* POST > Create\n* GET > Read\n* PUT/PATCH > Update\n* DELETE > Delete",
                    "correct": false
                },
                {
                    "answer": "post",
                    "comment": "Тема 4.4.0. Операции RESTful соответствуют следующим методам HTTP (показаны слева, а операция RESTful справа):\n* POST > Create\n* GET > Read\n* PUT/PATCH > Update\n* DELETE > Delete",
                    "correct": false
                }
            ],
            "question": "Какая операция RESTful соответствует методу HTTP GET?"
        }
    ],
    "skills": {},
    "tags": {
        "$ref": "../../material-tags.json"
    },
    "title": "Тест на понимание темы: Понимание и использование API",
    "assets": {
        "$ref": "./assets"
    }
}