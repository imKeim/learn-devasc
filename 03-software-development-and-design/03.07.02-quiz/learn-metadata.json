{
    "title": "Контрольный тест по теме: Проектирование и разработка ПО",
    "description": "Нажмите ``Начать прохождение`` для отображения вопросов и выберите самый подходящий ответ",
    "difficulty": 1,
    "duration": "PT0H30M",
    "materialType": "test",
    "passingScore": 100,
    "questions": [
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Lean",
                    "comment": "Модель Waterfall — это самый ранний подход SDLC. Фазы следуют линейному последовательному потоку, где каждая фаза начинается только тогда, когда предыдущая фаза завершена.",
                    "correct": false
                },
                {
                    "answer": "Waterfall",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Scrum",
                    "comment": "Модель Waterfall — это самый ранний подход SDLC. Фазы следуют линейному последовательному потоку, где каждая фаза начинается только тогда, когда предыдущая фаза завершена.",
                    "correct": false
                },
                {
                    "answer": "Agile",
                    "comment": "Модель Waterfall — это самый ранний подход SDLC. Фазы следуют линейному последовательному потоку, где каждая фаза начинается только тогда, когда предыдущая фаза завершена.",
                    "correct": false
                }
            ],
            "question": "Какая методология разработки программного обеспечения предписывает разработчикам следовать строгому порядку процессов, выполняя один шаг в процессе SDLC, прежде чем переходить к следующему шагу."
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Lean",
                    "comment": "В гибкой модели разработки программного обеспечения процесс SDLC выполняется в виде множества быстрых итераций, называемых спринтами.",
                    "correct": false
                },
                {
                    "answer": "Extreme Programming",
                    "comment": "В гибкой модели разработки программного обеспечения процесс SDLC выполняется в виде множества быстрых итераций, называемых спринтами.",
                    "correct": false
                },
                {
                    "answer": "Agile",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Waterfall",
                    "comment": "В гибкой модели разработки программного обеспечения процесс SDLC выполняется в виде множества быстрых итераций, называемых спринтами.",
                    "correct": false
                }
            ],
            "question": "Какая методология разработки SDLC использует множество быстрых итераций, известных как спринты?"
        },
        {
            "answerType": "multiChoice",
            "answers": [
                {
                    "answer": "функции",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "аргументы",
                    "comment": "Тема 3.4.0. Методы и функции — это блоки кода, выполняющие задачи при вызове. Функции — это отдельные блоки кода, тогда как методы — это блоки кода, связанные с объектом.",
                    "correct": false
                },
                {
                    "answer": "параметры",
                    "comment": "Тема 3.4.0. Методы и функции — это блоки кода, выполняющие задачи при вызове. Функции — это отдельные блоки кода, тогда как методы — это блоки кода, связанные с объектом.",
                    "correct": false
                },
                {
                    "answer": "объекты",
                    "comment": "Тема 3.4.0. Методы и функции — это блоки кода, выполняющие задачи при вызове. Функции — это отдельные блоки кода, тогда как методы — это блоки кода, связанные с объектом.",
                    "correct": false
                },
                {
                    "answer": "методы",
                    "comment": "",
                    "correct": true
                }
            ],
            "question": "Какие два компонента программирования определяются как блоки кода, выполняющие задачи при вызове? (Выберите два.)"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "**locate python3**",
                    "comment": "Команда Linux **which** используется для поиска определенного приложения (в определенных каталогах, как определено переменной среды PATH).",
                    "correct": false
                },
                {
                    "answer": "**which python3**",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "**where python3**",
                    "comment": "Команда Linux **which** используется для поиска определенного приложения (в определенных каталогах, как определено переменной среды PATH).",
                    "correct": false
                },
                {
                    "answer": "**find python3**",
                    "comment": "Команда Linux **which** используется для поиска определенного приложения (в определенных каталогах, как определено переменной среды PATH).",
                    "correct": false
                }
            ],
            "question": "Разработчик хочет найти расположение исполняемого файла Python 3. Какую команду должен использовать разработчик?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "сопровождение",
                    "comment": "Процесс SDLC состоит из шести этапов:\n1. **Требования и анализ**. Владелец продукта и квалифицированные члены команды собирают требования к создаваемому программному обеспечению.\n2. **Дизайн**: Архитекторы и разработчики программного обеспечения проектируют программное обеспечение на основе предоставленной спецификации запроса на программное обеспечение.\n3. **Реализация**: разработчики берут проектную документацию и разрабатывают код в соответствии с этим дизайном. По завершении этой фазы функциональный код, реализующий требования заказчика, готов к тестированию.\n4. **Тестирование**: инженеры по тестированию берут код и устанавливают его в среду тестирования, чтобы они могли следовать плану тестирования.\n5. **Развертывание**: программное обеспечение устанавливается в производственную среду.\n6. **Техническое обслуживание : команда разработчиков оказывает поддержку клиентам и работает над улучшением программного обеспечения.",
                    "correct": false
                },
                {
                    "answer": "реализация",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "развертывание",
                    "comment": "Процесс SDLC состоит из шести этапов:\n1. **Требования и анализ**. Владелец продукта и квалифицированные члены команды собирают требования к создаваемому программному обеспечению.\n2. **Дизайн**: Архитекторы и разработчики программного обеспечения проектируют программное обеспечение на основе предоставленной спецификации запроса на программное обеспечение.\n3. **Реализация**: разработчики берут проектную документацию и разрабатывают код в соответствии с этим дизайном. По завершении этой фазы функциональный код, реализующий требования заказчика, готов к тестированию.\n4. **Тестирование**: инженеры по тестированию берут код и устанавливают его в среду тестирования, чтобы они могли следовать плану тестирования.\n5. **Развертывание**: программное обеспечение устанавливается в производственную среду.\n6. **Техническое обслуживание : команда разработчиков оказывает поддержку клиентам и работает над улучшением программного обеспечения.",
                    "correct": false
                },
                {
                    "answer": "тестирование",
                    "comment": "Процесс SDLC состоит из шести этапов:\n1. **Требования и анализ**. Владелец продукта и квалифицированные члены команды собирают требования к создаваемому программному обеспечению.\n2. **Дизайн**: Архитекторы и разработчики программного обеспечения проектируют программное обеспечение на основе предоставленной спецификации запроса на программное обеспечение.\n3. **Реализация**: разработчики берут проектную документацию и разрабатывают код в соответствии с этим дизайном. По завершении этой фазы функциональный код, реализующий требования заказчика, готов к тестированию.\n4. **Тестирование**: инженеры по тестированию берут код и устанавливают его в среду тестирования, чтобы они могли следовать плану тестирования.\n5. **Развертывание**: программное обеспечение устанавливается в производственную среду.\n6. **Техническое обслуживание : команда разработчиков оказывает поддержку клиентам и работает над улучшением программного обеспечения.",
                    "correct": false
                }
            ],
            "question": "Какой этап SDLC завершается функциональным кодом, который удовлетворяет требованиям заказчика и готов к тестированию?"
        },
        {
            "answerType": "multiChoice",
            "answers": [
                {
                    "answer": "locked (заблокированный)",
                    "comment": "Тема 3.3.0. Существуют три состояния файла Git:\n* **Committed (зафиксированный)**: версия файла, сохраненная в каталоге .git.\n* **Modified (модифицированный)**: файл был изменен, но не помещен в репозиторий.\n* **Staged (постановочный)**: измененный файл готов к фиксации в репозитории.",
                    "correct": false
                },
                {
                    "answer": "staged (подготовленный)",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "deleted (удаленный)",
                    "comment": "Тема 3.3.0. Существуют три состояния файла Git:\n* **Committed (зафиксированный)**: версия файла, сохраненная в каталоге .git.\n* **Modified (модифицированный)**: файл был изменен, но не помещен в репозиторий.\n* **Staged (постановочный)**: измененный файл готов к фиксации в репозитории.",
                    "correct": false
                },
                {
                    "answer": "secured (безопасный)",
                    "comment": "Тема 3.3.0. Существуют три состояния файла Git:\n* **Committed (зафиксированный)**: версия файла, сохраненная в каталоге .git.\n* **Modified (модифицированный)**: файл был изменен, но не помещен в репозиторий.\n* **Staged (постановочный)**: измененный файл готов к фиксации в репозитории.",
                    "correct": false
                },
                {
                    "answer": "commited (зафиксированный)",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "modified (модифицированный)",
                    "comment": "",
                    "correct": true
                }
            ],
            "question": "Каковы три состояния файла Git? (Выберите три.)"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "opening (открытие)",
                    "comment": "Тема 3.6.0. Пролог XML, который является первой строкой XML-документа, имеет специальный формат, представленный скобками **<?** и **?>**.",
                    "correct": false
                },
                {
                    "answer": "prolog (пролог)",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "introduction (введение)",
                    "comment": "Тема 3.6.0. Пролог XML, который является первой строкой XML-документа, имеет специальный формат, представленный скобками **<?** и **?>**.",
                    "correct": false
                },
                {
                    "answer": "preamble (преамбула)",
                    "comment": "Тема 3.6.0. Пролог XML, который является первой строкой XML-документа, имеет специальный формат, представленный скобками **<?** и **?>**.",
                    "correct": false
                }
            ],
            "question": "Какой термин используется для описания первой строки документа XML?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "через оператор import",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "вызывая имя модуля",
                    "comment": "Тема 3.4.0. Модуль в Python — это файл Python с упакованными функциями. Когда функции, содержащиеся в модуле, необходимы в приложении на Python, приложение использует оператор **import** для включения этих функций в приложение.",
                    "correct": false
                },
                {
                    "answer": "через оператор include",
                    "comment": "Тема 3.4.0. Модуль в Python — это файл Python с упакованными функциями. Когда функции, содержащиеся в модуле, необходимы в приложении на Python, приложение использует оператор **import** для включения этих функций в приложение.",
                    "correct": false
                },
                {
                    "answer": "с помощью оператора присваивания переменной",
                    "comment": "Тема 3.4.0. Модуль в Python — это файл Python с упакованными функциями. Когда функции, содержащиеся в модуле, необходимы в приложении на Python, приложение использует оператор **import** для включения этих функций в приложение.",
                    "correct": false
                }
            ],
            "question": "Как приложение использует модуль в Python?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "Он принимает пользовательский ввод и манипулирует им, чтобы он соответствовал формату модели или представления.",
                    "comment": "Тема 3.2.0. Шаблон проектирования Model-View-Controller (MVC) абстрагирует код и ответственность на три отдельных компонента: модель, представление и контроллер. Контроллер принимает ввод, манипулирует данными и отправляет обработанные данные в модель.",
                    "correct": false
                },
                {
                    "answer": "Он принимает пользовательский ввод и манипулирует им в правильном формате для модели.",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "Он принимает выбранные данные и отображает их пользователю.",
                    "comment": "Тема 3.2.0. Шаблон проектирования Model-View-Controller (MVC) абстрагирует код и ответственность на три отдельных компонента: модель, представление и контроллер. Контроллер принимает ввод, манипулирует данными и отправляет обработанные данные в модель.",
                    "correct": false
                },
                {
                    "answer": "Он обеспечивает визуальное представление данных.",
                    "comment": "Тема 3.2.0. Шаблон проектирования Model-View-Controller (MVC) абстрагирует код и ответственность на три отдельных компонента: модель, представление и контроллер. Контроллер принимает ввод, манипулирует данными и отправляет обработанные данные в модель.",
                    "correct": false
                }
            ],
            "question": "Какова роль компонента контроллера в потоке Model-View-Controller (MVC)?"
        },
        {
            "answerType": "singleChoice",
            "answers": [
                {
                    "answer": "формальный",
                    "comment": "Тема 3.5.0. При обзоре кода через плечо разработчик, написавший код, проходит через изменения кода строка за строкой с рецензентом, который предоставляет обратную связь. В этом типе рецензирования код можно изменить на месте, чтобы рецензент мог повторно проверить его на месте.",
                    "correct": false
                },
                {
                    "answer": "основанный на изменении",
                    "comment": "Тема 3.5.0. При обзоре кода через плечо разработчик, написавший код, проходит через изменения кода строка за строкой с рецензентом, который предоставляет обратную связь. В этом типе рецензирования код можно изменить на месте, чтобы рецензент мог повторно проверить его на месте.",
                    "correct": false
                },
                {
                    "answer": "через плечо",
                    "comment": "",
                    "correct": true
                },
                {
                    "answer": "по электронной почте",
                    "comment": "Тема 3.5.0. При обзоре кода через плечо разработчик, написавший код, проходит через изменения кода строка за строкой с рецензентом, который предоставляет обратную связь. В этом типе рецензирования код можно изменить на месте, чтобы рецензент мог повторно проверить его на месте.",
                    "correct": false
                }
            ],
            "question": "Какой метод проверки кода предполагает, что разработчик построчно просматривает код вместе с рецензентом, что позволяет разработчику вносить изменения на месте?"
        }
    ],
    "skills": {},
    "tags": {
        "$ref": "../../material-tags.json"
    },
    "assets": {
        "$ref": "./assets"
    }
}